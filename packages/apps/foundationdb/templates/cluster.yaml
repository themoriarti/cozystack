{{- $cozyConfig := lookup "v1" "ConfigMap" "cozy-system" "cozystack" | default (dict "data" (dict)) }}
{{- $clusterDomain := index $cozyConfig.data "cluster-domain" | default "cozy.local" }}
---
apiVersion: apps.foundationdb.org/v1beta2
kind: FoundationDBCluster
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: foundationdb
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  version: {{ .Values.cluster.version | quote }}

  databaseConfiguration:
    redundancy_mode: {{ .Values.cluster.redundancyMode }}
    storage_engine: {{ .Values.cluster.storageEngine }}

  processCounts:
    {{- toYaml .Values.cluster.processCounts | nindent 4 }}
  
  automationOptions:
    replacements:
      enabled: {{ .Values.automaticReplacements }}
    faultDomain:
      key: {{ .Values.cluster.faultDomain.key }}
      {{- if .Values.cluster.faultDomain.valueFrom }}
      valueFrom: {{ .Values.cluster.faultDomain.valueFrom }}
      {{- end }}
    imageType: {{ .Values.imageType }}
    labels:
      filterOnOwnerReference: false
      matchLabels:
        foundationdb.org/fdb-cluster-name: {{ .Release.Name }}
      processClassLabels:
        - foundationdb.org/fdb-process-class
      processGroupIDLabels:
        - foundationdb.org/fdb-process-group-id
    minimumUptimeSecondsForBounce: 60
  
  processes:
    general:
      {{- if .Values.customParameters }}
      customParameters:
        {{- range .Values.customParameters }}
        - {{ . }}
        {{- end }}
      {{- end }}
      podTemplate:
        metadata:
          labels:
            policy.cozystack.io/allow-to-apiserver: "true"
        spec:
          serviceAccountName: {{ .Release.Name }}-foundationdb
          securityContext:
            fsGroup: {{ .Values.securityContext.runAsGroup }}
          containers:
            - name: foundationdb
              resources: {{- include "cozy-lib.resources.defaultingSanitize" (list .Values.resourcesPreset .Values.resources $) | nindent 16 }}
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
            - name: foundationdb-kubernetes-sidecar
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
          initContainers:
            - name: foundationdb-kubernetes-init
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
      volumeClaimTemplate:
        spec:
          {{- if .Values.storage.storageClass }}
          storageClassName: {{ .Values.storage.storageClass }}
          {{- end }}
          resources:
            requests:
              storage: {{ .Values.storage.size }}
  
  routing:
    dnsDomain: {{ $clusterDomain }}
    defineDNSLocalityFields: true
  
  sidecarContainer:
    enableLivenessProbe: true
    enableReadinessProbe: true